#include <vomitblood.hpp>
#include <acontroller.hpp>
#include <cmd.hpp>

/*
 * Основной цикл игры
 *\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
 * timePerFrame - время выделенное на физический кадр (dt) игры ( 1/60 = 16,6 ms )
 * 	Это значит что просчёт столкновении и передвижении будет производится 60
 * 	раз в секунду на любом компьютере в независимост от его производительности.
 *	Хочу подчернкуть что FPS может гулять в любых пределах, но только не dt!
 *\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
 * timeSinceLastUpdate - время пройденное с последнего обновления
 * 	просчёта игровых передвижений.
 *\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
 * _view->draw() - непосредственный рендер игрового поля. Очень медленная операция.
 * 	Если не использовать нижеприведенный механизм, то физика игры будет сильно
 * 	зависеть от аппаратных ресурсов компьютера, на котором запущена игра, что 
 * 	очень не хорошо.
 * \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
*/
void AController::manage(IView &view)
{
	_loopIsRunning = true;

	// Установка постоянного значения длительности кадра
	sf::Time timePerFrame = sf::seconds(1.f / 60.f);

	// Инициализация таймера
	sf::Clock clock;
	sf::Time timeSinceLastUpdate = sf::Time::Zero;

	while(_loopIsRunning) {
		
		// Обработка событий, пришедших от пользователя
		processEvents();

		// Узнаём сколько времени прошло с окончания предыдущей итерации просчёта
		// И заодно перезапускаем таймер для нового подсчёта
		timeSinceLastUpdate += clock.restart();

		// Если с окончания предыдущей итерации прошло много времени для
		// игрового движка, то наверстываем упущенное ( убираем лаги )
		while (timeSinceLastUpdate > timePerFrame) {
			timeSinceLastUpdate -= timePerFrame;

			processEvents();

			// Производим новый расчёт положений и столкновений объектов игры
			processCommands(view.update());
		}
		
		// Производим рендер игрового поля
		view.draw();
	}
}

void AController::stopManage()
{
	_loopIsRunning = false;
}
